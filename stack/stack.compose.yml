services:
  dashboard:
    profiles: [dev]
    image: ${DASHBOARD_IMAGE}
    ports:
      - "8501:8501"
    environment:
      - AUTH_SYSTEM_ENABLED=False
      - BACKEND_API_HOST=hummingbot-api
      - BACKEND_API_PORT=8000
      - BACKEND_API_USERNAME=${USERNAME}
      - BACKEND_API_PASSWORD=${PASSWORD}
    networks: [emqx-bridge]
    depends_on: [hummingbot-api]

  hummingbot-api:
    image: ${API_IMAGE}
    ports:
      - "8000:8000"
    env_file:
      - /stack/api.env
    environment:
      - BROKER_HOST=emqx
      - DATABASE_URL=postgresql+asyncpg://hbot:hummingbot-api@postgres:5432/hummingbot_api
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks: [emqx-bridge]
    depends_on: [postgres]

  emqx:
    image: emqx:5
    restart: unless-stopped
    environment:
      - EMQX_NAME=emqx
      - EMQX_HOST=node1.emqx.local
      - EMQX_CLUSTER__DISCOVERY_STRATEGY=static
      - EMQX_CLUSTER__STATIC__SEEDS=[emqx@node1.emqx.local]
      - EMQX_LOADED_PLUGINS=emqx_recon,emqx_retainer,emqx_management,emqx_dashboard
    volumes:
      - emqx-data:/opt/emqx/data
      - emqx-log:/opt/emqx/log
      - emqx-etc:/opt/emqx/etc
    networks:
      emqx-bridge:
        aliases: [node1.emqx.local]
    healthcheck:
      test: ["CMD", "/opt/emqx/bin/emqx_ctl", "status"]
      interval: 5s
      timeout: 25s
      retries: 5

  postgres:
    image: postgres:15
    restart: unless-stopped
    environment:
      - POSTGRES_DB=hummingbot_api
      - POSTGRES_USER=hbot
      - POSTGRES_PASSWORD=hummingbot-api
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks: [emqx-bridge]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hbot -d hummingbot_api"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  emqx-bridge:
    driver: bridge

volumes:
  emqx-data: {}
  emqx-log: {}
  emqx-etc: {}
  postgres-data: {}
